#!/bin/sh
#
# $Id$
#
# Copyright 2013, Juniper Networks, Inc.
# All rights reserved.
# This SOFTWARE is licensed under the LICENSE provided in the
# ../Copyright file. By downloading, installing, copying, or otherwise
# using the SOFTWARE, you agree to be bound by the terms of that
# LICENSE.

op="$1"
shift

function set_branch () {
    branch=`git branch -q | awk '/\*/ {print $2}'`
    case "$branch" in
	gh-pages*)
            branch=gh-pages
	    ;;
    esac
}

function check_in_details () {
    files=`git status -s "$@" | awk '{print $2}'`

    for file in $files; do
	git diff $file
        status=`git status -s "$file"`
	echo $status

        /bin/echo -n "Commit message: "
	read comment
	if [ "$comment" = "" ]; then
	    echo "Skipping file $file";
	else
	    if [ "$status" = "?? $file" ]; then
		git add "$file"
	    fi
	    git commit -m "$comment" "$file"
	fi
    done
}

function push_to_branch () {
    set_branch
    echo "Pushing to $branch ..."
    git push origin $branch
}

case "$op" in
    archive)
        url=`git config --get remote.origin.url`
	base=`basename "$url" .git`
        tag=`git tag -l 'v*' | sed 's/^v//'`
	git archive --prefix=$base-$tag --format=tar HEAD | gzip > $base-$tag.tgz
	;;

    br)
        set_branch
        if [ x"$@" = x ]; then
	    echo $branch
	elif [ x"$1" = xnew ]; then
	    git checkout -b "$2" $branch
	else
	    git checkout "$@"
	fi
	;;

    checkin|ci|check|checkpoint)
        git diff $file
        git status -s "$@"

	opts=
	if [ x"$@" = x ]; then
	    opts=-a
	fi

        /bin/echo -n "Commit message: "
	read comment
	if [ "$comment" = "" ]; then
	    echo "Commit aborted"
	else
  	    git commit -m "$comment" "$@"
	fi
	;;

    check-in-details|cid)
        check_in_details
	;;

    commit)
        check_in_details
	push_to_branch
	;;

    ctag|current-tag)
        git tag -l 'v*' | sed 's/^v//'
	;;

    diff|dif|delta)
        git diff "$@"
	;;

    make-gh-pages)
        url=`git config --get remote.origin.url`
	base=`basename "$url" .git`
        mkdir -p gh-pages
	git clone $url -b gh-pages
	cd gh-pages
        git master --set-upstream gh-pages origin/gh-pages
	;;

    outstanding|out|what)
        set_branch
        git diff origin/$branch $branch
	;;

    push|pu|pom|pob)
	# Push all local changes to the origin/repo server
        push_to_branch
	;;

    push-test|pt|ptest)
	# Push all local changes to the origin/repo server
        set_branch
	git push --dry-run origin $branch
	;;

    st|stat|status)
	# Show status
	git status -s "$@"
	;;

    tag|add-tag)
	# Tag source code with revision number
        # If you make a tag like "0.15.0", then you can
        # use an URL like:
        # https://github.com/Juniper/libslax/archive/0.15.0.tar.gz
        if [ "$@" = "" ]; then
	    echo "missing tag name"
	    exit 1
        fi
	git tag "$@"
	git push origin --tags $branch
	;;

    up|update)
	# Update working copy with repo's changes
	git pull -v "$@"
	;;

    *)
	# Anything else get passed on directly
	git "$op" "$@"
	;;
esac

exit $?
